{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","axios.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["post","props","className","onClick","click","id","title","author","FullPost","state","selectedPost","hasLoaded","error","deletePostHandler","axios","delete","selectedId","then","response","console","log","catch","setState","prevProps","prevState","this","get","data","body","Component","NewPost","content","changeHandler","e","target","name","value","addPostHandler","type","onChange","rows","instance","create","baseURL","defaults","headers","common","Blog","posts","clickHandler","updatedPosts","slice","map","key","App","Boolean","window","location","hostname","match","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee2e7aef.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\" onClick={()=>{props.click(props.id)}}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\nimport './FullPost.css';\nimport axios from 'axios';\n\nclass FullPost extends Component {\n    state = {\n        selectedPost: null,\n        hasLoaded: false,\n        error: false\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        console.log('[FullPost.js componentDidUpdate]');\n        if(prevProps.selectedId!==this.props.selectedId){\n            console.log('Accessing server...');\n            axios.get('/posts/'+this.props.selectedId)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    selectedPost: response.data,\n                    hasLoaded: true\n                })\n            })\n            .catch(error=>{\n                this.setState({error: true});\n            })\n        } \n    }\n\n    deletePostHandler = () => {\n        axios.delete('/posts/'+this.props.selectedId)\n        .then(response => {\n            console.log('Deleted post response:',response);\n        })\n        .catch(error=>{\n            this.setState({error: true});\n        })\n    }\n    render () {\n       \n        /*\n        Way 1: Displaying selected Id data from 'posts' data which blogs sent\n        let selectedPost = this.props.posts.filter(post=>{\n            return (post.id===this.props.selectedId);   \n        });\n\n        let post = <p>Please select a Post!</p>;\n        if(selectedPost.length){\n            post = (\n                    <div className=\"FullPost\">\n                        <h1>{selectedPost[0].title}</h1>\n                        <p>{selectedPost[0].body}</p>\n                        <div className=\"Edit\">\n                            <button className=\"Delete\">Delete</button>\n                        </div>\n                    </div>\n            );\n        }*/\n        console.log('selectedId:',this.props.selectedId, 'selectedPost:', this.state.selectedPost);\n        let post = <p>Please select a Post!</p>;\n\n        if(this.props.selectedId){\n            if(this.state.error){\n                post = <div>Error accessing server</div>\n            }\n            else if(this.state.hasLoaded){\n                post = (\n                    <div className=\"FullPost\">\n                        <h1>{this.state.selectedPost.title}</h1>\n                        <p>{this.state.selectedPost.body}</p>\n                        <div className=\"Edit\">\n                            <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                        </div>\n                    </div>);\n            }\n            else{\n                post = <div>Loading......</div>\n            }\n            \n        }\n            \n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    changeHandler = (e) => {\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    addPostHandler = () => {\n        let data = {\n            ...this.state\n        }\n        axios.post('/posts/', data)\n        .then(response=>{\n            console.log('Post Data', response);\n        })\n    }\n\n    render () {\n        //console.log(this.state);\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} \n                       name='title'\n                       onChange={this.changeHandler} />\n                <label>Content</label>\n                <textarea rows=\"4\" \n                          name='content'\n                          value={this.state.content} \n                          onChange={this.changeHandler} />\n                <label>Author</label>\n                <select value={this.state.author}\n                        name='author' \n                        onChange={this.changeHandler}>\n                    <option></option>\n                    <option value=\"Dilpreet\">Dilpreet</option>\n                    <option value=\"Anter\">Anter</option>\n                </select>\n                <button onClick = {this.addPostHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n});\n\ninstance.defaults.headers.common['Authorization'] = 'Auth token using instance';\n\nexport default instance;","import React, { Component } from 'react';\n\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\n//import axios from 'axios';\nimport axios from '../../axios';\n\nclass Blog extends Component {\n    state = {\n        posts: [],\n        selectedId: null,\n        error: false\n    }\n    clickHandler = (id) => {\n        this.setState({selectedId: id})\n    }\n    componentDidMount(){\n        console.log('[Blog.js componentDidMount]')\n        axios.get('/posts/')\n            .then(response=>{\n                let posts = response.data.slice(0,4);\n                let updatedPosts = posts.map(post=>{\n                    return {\n                        ...post,\n                        author:'Jasnoor'\n                    }\n                });\n                this.setState({posts: updatedPosts});\n            }) \n            .catch(error=> this.setState({error: true}));\n\n    }\n\n    render () {\n                let posts = <div>Something went wrong!</div>\n                if(!this.state.error){\n                    posts = (\n                        this.state.posts.map(post=>{\n                            return <Post key={post.id} \n                                    id={post.id}\n                                    title={post.title} \n                                    author={post.author}\n                                    click={this.clickHandler}/>\n                            })   \n                    );                      \n                }\n                return(\n                    <div>\n                        <section className=\"Posts\">\n                            {posts}\n                        </section>\n                        <section>\n                            {/*<FullPost selectedId={this.state.selectedId} posts={this.state.posts}/>*/}\n                            <FullPost selectedId={this.state.selectedId}/>\n                        </section>\n                        <section>\n                            <NewPost />\n                        </section>\n                    </div>\n                );\n    }\n}\n\nexport default Blog;","import React from 'react';\nimport './App.css';\nimport Blog from './containers/Blog/Blog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Blog />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\n//default global configuration setting\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\naxios.defaults.headers.common['Authorizations'] = 'Auth token';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxios.interceptors.request.use(request=>{\n    console.log('Request received in interceptors:', request);\n    //we can edit request config here, before sending request\n    return request;\n}, error => {//only handle errors like internet failure\n    console.log('Error received in interceptors:', error);\n    return Promise.reject(error);\n});\naxios.interceptors.response.use(response=>{\n    console.log('Response received in interceptors:', response);\n    //we can edit response config here, before sending request\n    return response;\n}, error => {//only handle errors like internet failure\n    console.log('Error received in interceptors:', error);\n    return Promise.reject(error);\n})\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}