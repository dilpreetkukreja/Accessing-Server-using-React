{"version":3,"sources":["components/Post/Post.js","axios.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","containers/Blog/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["post","props","className","onClick","click","id","title","author","instance","axios","create","baseURL","defaults","headers","common","FullPost","state","hasLoaded","error","callApi","deletePostHandler","delete","selectedId","then","response","console","log","catch","setState","prevProps","this","match","params","get","selectedPost","data","componentWillUnmount","body","Component","Posts","posts","clickHandler","updatedPosts","slice","map","to","key","path","url","component","React","NewPost","content","submitted","changeHandler","e","target","name","value","addPostHandler","history","push","type","onChange","rows","Blog","exact","from","App","Boolean","window","location","hostname","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cf41125.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\" onClick={()=>{props.click(props.id)}}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n});\n\ninstance.defaults.headers.common['Authorization'] = 'Auth token using instance';\n\nexport default instance;","import React, { Component } from 'react';\nimport './FullPost.css';\nimport axios from 'axios';\n\nclass FullPost extends Component {\n    state = {\n        hasLoaded: false,\n        error: false\n    }\n    \n    callApi = () =>{\n        \n    }\n    componentDidMount(prevProps){\n        console.log('[FullPost.js componentDidMount]');\n        console.log('[FullPost.js componentDidMount] prevProps', prevProps);\n        if(this.props.match.params.id){\n            console.log('Accessing server...');\n            axios.get('/posts/'+this.props.match.params.id)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    selectedPost: response.data,\n                    hasLoaded: true\n                })\n            })\n            .catch(error=>{\n                this.setState({error: true});\n            })\n        } \n    }\n    componentDidUpdate(prevProps){\n        console.log('FullPost.js: componentDidUpdate');\n        console.log('[FullPost.js: componentDidUpdate] prevProps:',prevProps);\n        if(prevProps.match.params.id!==this.props.match.params.id){\n            console.log('Accessing server...');\n            axios.get('/posts/'+this.props.match.params.id)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    selectedPost: response.data,\n                    hasLoaded: true\n                })\n            })\n            .catch(error=>{\n                this.setState({error: true});\n            })\n        }\n    }\n    componentWillUnmount(){\n        console.log('FullPost:', this.componentWillUnmount);\n    }\n\n    deletePostHandler = () => {\n        axios.delete('/posts/'+this.props.selectedId)\n        .then(response => {\n            console.log('Deleted post response:',response);\n        })\n        .catch(error=>{\n            this.setState({error: true});\n        })\n    }\n    render () {\n       \n        /*\n        Way 1: Displaying selected Id data from 'posts' data which blogs sent\n        let selectedPost = this.props.posts.filter(post=>{\n            return (post.id===this.props.selectedId);   \n        });\n\n        let post = <p>Please select a Post!</p>;\n        if(selectedPost.length){\n            post = (\n                    <div className=\"FullPost\">\n                        <h1>{selectedPost[0].title}</h1>\n                        <p>{selectedPost[0].body}</p>\n                        <div className=\"Edit\">\n                            <button className=\"Delete\">Delete</button>\n                        </div>\n                    </div>\n            );\n        }*/\n        console.log('selectedPost:', this.state.selectedPost);\n        console.log('FullPost.js props', this.props);\n        let post = <p>Please select a Post!</p>;\n        \n\n        if(this.props.match.params.id){\n            if(this.state.error){\n                post = <div>Error accessing server</div>\n            }\n            else if(this.state.hasLoaded){\n                post = (\n                    <div className=\"FullPost\">\n                        <h1>{this.state.selectedPost.title}</h1>\n                        <p>{this.state.selectedPost.body}</p>\n                        <div className=\"Edit\">\n                            <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                        </div>\n                    </div>);\n            }\n            else{\n                post = <div>Loading......</div>\n            }\n            \n        }\n            \n        return post;\n    }\n}\n\nexport default FullPost;","import React from 'react';\nimport Post from '../../../components/Post/Post';\nimport axios from '../../../axios';\nimport './Posts.css';\nimport {Link, Route} from 'react-router-dom';\nimport FullPost from '../FullPost/FullPost';\n\nclass Posts extends React.Component{\n    state = {\n        posts: [],\n        error: false\n    }\n    clickHandler = (id) => {\n        this.setState({selectedId: id})\n    }\n    componentDidMount(){\n        console.log('[Posts.js componentDidMount]')\n        axios.get('/posts/')\n            .then(response=>{\n                let posts = response.data.slice(0,4);\n                let updatedPosts = posts.map(post=>{\n                    return {\n                        ...post,\n                        author:'Jasnoor'\n                    }\n                });\n                this.setState({posts: updatedPosts});\n            }) \n            .catch(error=> this.setState({error: true}));\n\n    }\n    componentWillUnmount(){\n        console.log('[Posts.js componentWillUnmount]');\n    }\n    render(){\n        console.log('[Posts.js props:]', this.props);\n        let posts = <div>Something went wrong!</div>\n        if(!this.state.error){\n            posts = (\n                this.state.posts.map(post=>{\n                    return (\n                            <Link to={`/posts/${post.id}`} key={post.id}>\n                                 <Post id={post.id}\n                                    title={post.title} \n                                    author={post.author}\n                                    click={this.clickHandler}/>\n                            </Link>\n                           )\n                    })   \n            );                      \n        }\n        return (\n            <div className=\"Posts\">\n                {posts}\n                <Route path={`${this.props.match.url}/:id`} component={FullPost} />\n            </div>\n        );\n    }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './NewPost.css';\n//import {Redirect} from 'react-router-dom';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max',\n        submitted: false\n    }\n\n    changeHandler = (e) => {\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    addPostHandler = () => {\n        let data = {\n            ...this.state\n        }\n        axios.post('/posts/', data)\n        .then(response=>{\n            console.log('Post Data', response);\n            //this.setState({submitted: true});//it replaces the visited page, so by pressing backward key we cannot go to page we just visited\n            //this.props.history.replace('/cards');//it replaces the visited page, same as above\n            this.props.history.push('/cards');// it don't replace the visited page, so by pressing backward key, we can go back to prev page we visited\n\n        })\n    }\n\n    render () {\n        //console.log(this.state);\n        /*let redirect = null;\n        if(this.state.submitted){\n            redirect = <Redirect to='/posts' />\n        }*/\n        return (\n            <div className=\"NewPost\">\n                {/*{redirect}*/}\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} \n                       name='title'\n                       onChange={this.changeHandler} />\n                <label>Content</label>\n                <textarea rows=\"4\" \n                          name='content'\n                          value={this.state.content} \n                          onChange={this.changeHandler} />\n                <label>Author</label>\n                <select value={this.state.author}\n                        name='author' \n                        onChange={this.changeHandler}>\n                    <option></option>\n                    <option value=\"Dilpreet\">Dilpreet</option>\n                    <option value=\"Anter\">Anter</option>\n                </select>\n                <button onClick = {this.addPostHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\nimport './Blog.css';\n//import axios from 'axios';\nimport Posts from './Posts/Posts';\nimport {BrowserRouter as Router, NavLink, Route, Switch, Redirect} from 'react-router-dom';\nimport NewPost from \"./NewPost/NewPost\";\n//import FullPost from \"./FullPost/FullPost\";\n\nclass Blog extends Component {\n    render () {\n                return(\n                    <Router>\n                        <header className=\"Blog\">\n                            <li><NavLink to=\"/posts\" exact>Posts</NavLink></li>\n                            <li><NavLink to=\"/new-post\">New Post</NavLink></li>\n                        </header>\n                        <section>\n                            <Switch>\n                                <Route path=\"/new-post\" component={NewPost} />  \n                                <Route path=\"/posts\" component={Posts}/>   \n                                <Redirect from='/' to='/posts' />\n                            </Switch>\n                          \n                        </section> \n                    </Router>\n                );\n    }\n}\n\nexport default Blog;","import React from 'react';\nimport './App.css';\nimport Blog from './containers/Blog/Blog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Blog />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\n//default global configuration setting\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\naxios.defaults.headers.common['Authorizations'] = 'Auth token';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxios.interceptors.request.use(request=>{\n    console.log('Request received in interceptors:', request);\n    //we can edit request config here, before sending request\n    return request;\n}, error => {//only handle errors like internet failure\n    console.log('Error received in interceptors:', error);\n    return Promise.reject(error);\n});\naxios.interceptors.response.use(response=>{\n    console.log('Response received in interceptors:', response);\n    //we can edit response config here, before sending request\n    return response;\n}, error => {//only handle errors like internet failure\n    console.log('Error received in interceptors:', error);\n    return Promise.reject(error);\n})\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}